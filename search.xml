<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FPGA远程更新/在线升级</title>
    <url>/2021/03/04/FPGA%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0-%E5%9C%A8%E7%BA%BF%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1.摘要"></a>1.摘要</h1><p>　　对最近做的<strong>FPGA远程更新/在线升级</strong>做一个总结。一般在代码开发阶段，我们使用JTAG烧写代码，但当产品投入到实际使用过程中，难以再用JTAG进行固件更新。所以需要开发远程/在线更新的功能，即使用产品自带的通讯接口（如串口，以太网接口等）传输待更新的固件包，实现固件更新升级的功能。本文所使用的平台是ALTERA公司的cyclone IV E系列产品EP4CE30F23I7，PC通过串口将待更新的固件包传发送到FPGA，FPGA将接收的固件包写入FPGA的配置  flash:EPCS16中，并以新收到的固件包覆盖原来通过JTAG烧写的代码，当芯片重新上电或者进行一次重配置，FPGA便会执行新的固件包。</p>
<h1 id="2-FPGA上电加载过程"><a href="#2-FPGA上电加载过程" class="headerlink" title="2.FPGA上电加载过程"></a>2.FPGA上电加载过程</h1><p>　　目前，大多数FPGA芯片是基于 SRAM 的结构的， 而 SRAM 单元中的数据掉电就会丢失，因此系统上电后，必须要由配置电路将正确的配置数据加载到 SRAM 中，FPGA才能正常运行。EP4CE30F23I7采用EPCS16作为配置芯片，所以我们要做的就是将要更新的固件包烧写到此EPCS16芯片中。每次芯片上电，配置电路就会加载EPCS16中的固件包，进行一次配置，FPGA还有一个重配置的ip核，也可以在FPGA运行过程中进行重配置。<br>　　FPGA上电后会自动从0地址开始加载镜像文件（把一个FPGA工程综合生成的文件成为一个镜像文件），看别人说的rpd文件末尾至少留32个字节的FF，我认为可能是加载到32个连续的FF就会停止加载文件。<br>　　我的思路是编写一个工程称为出厂配置工程，再编写一个工程称为应用工程，应用工程是我们正常的编写的工程，也就是我们需要更新的固件。将出厂配置工程转换成jic文件并通过JTAG烧进flash中，但是只将该文件烧写在flash的前几个扇区，具体几个扇区由你的出厂配置程序的大小来定，我自己生成的jic文件占用6个扇区，在生成Jic文件时可以选择代码在flash中的地址的，所以我的出厂配置所占的地址范围为0x0 ~ 0x5FFFF，占前6个扇区。而我编写的应用工程则放在从0x60000开始地址的地方，在线烧写镜像文件时，将需要更新的文件从0x60000地址开始写就可以了。我们在线烧写的是rpd文件，后面具体介绍这几种文件。</p>
<p><img src="https://github.com/watch-xx/watchman.github.io/raw/master/img/FPGA%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/%E7%94%9F%E6%88%90%E7%9A%84JIC%E6%96%87%E4%BB%B6%E6%8C%87%E5%AE%9A%E5%9C%B0%E5%9D%80.JPG" alt="生成JIC文件指定地址"></p>
<h2 id="2-1FPGA配置方式"><a href="#2-1FPGA配置方式" class="headerlink" title="2.1FPGA配置方式"></a>2.1FPGA配置方式</h2><p>1.JTAG方式</p>
<p>　　通过JTAG接口，利用Quartus II软件可以直接对FPGA进行单独的硬件重新配置。Quartus II软件在编译时会自动生成用于JTAG配置的.sof文件。如果同时使用AS方式和JTAG方式来配置FPGA，JTAG配置方式拥有最高的优先级，此时AS方式将停止，而执行JTAG方式配置。</p>
<p>2.FPGA主动串行(AS)方式</p>
<p>　　主动串行配置方式(AS)是将配置数据事先存储在串行配置器件EPCS中,然后在系统上电时Cyclone IV FPGA通过串行接口读取配置数据（如果是压缩数据，还会进行解压缩处理）对内部的SRAM单元进行配置。因为上述配置过程中FPGA控制配置接口，因此通常称为主动配置方式。在配置期间，Cyclone IV用过串行接口来读配置数据，来对里面的SRAM编程。串行配置器件的四个接口包括，串行时钟输入DCLK，串行数据输出DATA，低有效的片选信号NCE，串行数据输入ASDI。本文就是采用这种方式。</p>
<p>3.FPGA被动(Passive)方式</p>
<p>　　此方法用的较少，不做介绍。</p>
<h2 id="2-2配置芯片EPCS16"><a href="#2-2配置芯片EPCS16" class="headerlink" title="2.2配置芯片EPCS16"></a>2.2配置芯片EPCS16</h2><p><img src="https://github.com/watch-xx/watchman.github.io/raw/master/img/FPGA%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/flash%E8%8A%AF%E7%89%87%E5%88%97%E8%A1%A8.JPG" alt="flash芯片列表"></p>
<p>　　如上图为EPCS系列容量表。EP4CE30F23I7采用EPCS16作为配置芯片，EPCS16共有16Mbit的存储空间被分成了32个扇区（ sector），每个扇区又分成256页（ page），每一页包含256字节。EPCS16各扇区的字节地址如下图所示：<br>对EPCS16的具体操作，在讲到ASMI IP核时再具体讲，我们利用ALTERA官方的IP核来对EPCS16进行擦除、读、写的操作。</p>
<p><img src="https://github.com/watch-xx/watchman.github.io/raw/master/img/FPGA%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/EPCS16%E5%9C%B0%E5%9D%80.JPG" alt="EPCS16地址"></p>
<h2 id="2-3FPGA生成的几种文件"><a href="#2-3FPGA生成的几种文件" class="headerlink" title="2.3FPGA生成的几种文件"></a>2.3FPGA生成的几种文件</h2><h3 id="1-sof文件"><a href="#1-sof文件" class="headerlink" title="1.sof文件"></a>1.sof文件</h3><p>　　sof文件是编译（分析、综合、布线、生成、时序）过程中生成的一个文件，生成的sof文件是可以直接通过JTAG口下载到FPGA的SRAM中去并直接执行。</p>
<h3 id="2-jic文件"><a href="#2-jic文件" class="headerlink" title="2.jic文件"></a>2.jic文件</h3><p>　　jic文件不是在编译过程中生成的，而是需要使用Quartus II软件的“Convert Programing File”功能将sof文件转换得到的。得到的jic文件，通过JTAG口可以将jic文件通过FPGA作为桥接芯片下载到配置芯片中去。</p>
<h3 id="3-pof文件"><a href="#3-pof文件" class="headerlink" title="3.pof文件"></a>3.pof文件</h3><p>　　pof文件和sof文件一样也是在Assemble过程中生成的，但是pof文件是不能直接下载到FPGA的SRAM中去的，而是通过ASP端口直接下载到FPGA的配置芯片中去的。配置芯片一般是串行FLASH芯片，在上电的时候FPGA会主动的从配置芯片中读取数据并烧写内部的SRAM数据然后执行程序。（在assignments – device – device and pin option, 在configuration 选项卡当中，要勾上Use Configuration device，并选择好配置芯片。 选择configuration scheme为Active Serial，编译就能生成pof文件）</p>
<h3 id="4-rpd文件"><a href="#4-rpd文件" class="headerlink" title="4.rpd文件"></a>4.rpd文件</h3><p>　　rpd文件为包含cyclone系列芯片二进制位流数据和配置数据的二进制文件的合成文件。我们生成rpd文件前，先要生成Pof文件再用Quartus II软件的“Convert Programing File”功能将pof文件转换成rpd文件。</p>
<p>　　我们一般是通过JTAG将Jic文件烧进EPCS16,在线升级是将rpd文件通过串口/网口等方式烧进EPCS16，当然烧写的过程是依靠FPGA来完成，我们要写一段代码用来接收串口/网口数据，将其写入EPCS16中。jic、rpd文件生成时，都是占2M字节，但文件内实际有效的并没有那么大，其中无效的数据都由FF填满，可以手动删除，但至少保留32个字节的FF。</p>
<h1 id="3-需要使用到的IP核"><a href="#3-需要使用到的IP核" class="headerlink" title="3.需要使用到的IP核"></a>3.需要使用到的IP核</h1><p>主要是“ASMI IP核”和“ Remote Update IP核”，还有PLL IP核。PLL不必多说。另外两个IP核配置如下图。</p>
<p>　　如下面左边图所示,选择要添加的端口。注意“Single byte write”和“Page write”分别表示以“单字节”写入或“多字节”写入。EPCS16是支持多字节写入的，最多可连续写入256个字节，我这里选择的是单字节写入。“Use ‘bulk_erase’ port”和“Use ‘sector_erase’ port”分别表示是以一次性擦除所以扇区和每次只擦除一个扇区。具体内容可参照“Serial Configuration Devices(EPCS1, EPCS4, EPCS16, EPCS64,and EPCS128) Data Sheet”和“ASMI Parallel Intel® FPGA IP Core User Guide”这两个文档，在ALTERA官网可以找到，里面有具体的读，写，擦除的时序图。</p>
<p><img src="https://github.com/watch-xx/watchman.github.io/raw/master/img/FPGA%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/ASMI%E6%A0%B8%E7%AB%AF%E5%8F%A3%E9%80%89%E6%8B%A9.JPG" alt="ASMI IP核端口选择"><img src="https://github.com/watch-xx/watchman.github.io/raw/master/img/FPGA%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/ASMI%E6%A0%B8.JPG" alt="ASMI IP核"></p>
<p>　　REMOTE IP核配置如下图，最好将 “Enable reconfig POF checking”选上，这是该IP核的一个功能，当触发重配置，该功能会校验指定重配置地址的镜像文件是否是有效地，这一点至关重要，后面讲实现思路时再具体讲为什么一定要这个功能。</p>
<p><img src="https://github.com/watch-xx/watchman.github.io/raw/master/img/FPGA%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/REMOTE%E6%A0%B8%E7%AB%AF%E5%8F%A3%E9%80%89%E6%8B%A9.JPG" alt="REMOTE IP核端口选择"><img src="https://github.com/watch-xx/watchman.github.io/raw/master/img/FPGA%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0/REMOTE%E6%A0%B8.JPG" alt="REMOTE IP核"></p>
<p>　　前面提到过ASMI IP核主要实现读写配置存储器EPCS16，这个IP核就是用来擦除，写，读EPCS16，我们通过这个ip核，不用再管对EPCS16擦除，写，读的时序，EPCS16的擦除，写，读时序也并不复杂，完全可以直接写，在EPCS16手册里有详细的时序图，但推荐使用asmi ip核，因为要使用remote update ip核的“pof_error”功能，必须要使用asmi Ip核。在“Remote Update Intel® FPGA IP User Guide”手册里有详细介绍。<br>　　这里再简单交代一下配置remote ip 核代码的流程。<br>　　remote ip核发起重配置需要一段代码来实现，主要内容就是指定重配置地址，然后发起重配置。</p>
<h1 id="3-功能实现思路"><a href="#3-功能实现思路" class="headerlink" title="3.功能实现思路"></a>3.功能实现思路</h1><p>　<br>　　一个完整的远程系统升级应该包括两个工程文件。一个出厂配置工程，一个应用工程。两个工程分别在EPCS16中所占的储存空间是 0x0 ~ 0x5FFFF，0x60000 ~ 0x1FFFFF。FPGA一上电，就会加载0地址处的配置文件，配置电路。这个时候FPGA跑的就是出厂配置工程。<br>　　出厂配置工程的代码逻辑：<br>　　1.第一步执行发起重配置，将0x60000地址后的代码配置到FPGA中。这个时候就需要用到pof_error校验的功能，在发起重配置的congfig信号发出之前，检验一下指定地址的配置文件是否完整可用。若证实可用，才发起重配置。若不可用就不发起重配置。因为如果重配置失败，这时候FPGA内部机制决定会继续发起重配置，但是配置文件是不完整的，就会一直发起在重配置，就死掉了。实测证明，只要勾选了pof_error校验的功能，不管自己是否手动判断pof_error,重配置时都会进行校验，如果重配置失败，就不会再发起重配置，当前FPGA依然是当前配置的电路，还可以正常工作，这时候就可以继续烧写新的配置文件。那么为什么第一步就要发起重配置，因为我们采用的是出厂配置工程+应用工程的结构。这样做的原因是为了应对在升级过程中发生断电，若断电，那么配置文件就会不完整，就死掉了。但采用这种方法，升级过程中，出厂配置工程始终没有被修改，因为我们升级的配置文件是从0x60000开始的，至少可以保证还可以再次升级。那么既然应用工程在0x60000地址处，而一上电配置的电路又是出厂配置文件，那么出厂配置文件里第一步就应该进行重配置。这一步重配置若成功，则FPGA里配置的电路就是我们的应用工程了。若失败，则到出厂配置工程第二步。</p>
<p>　　2.第二步接受串口/网口之类的数据，并将数据写到EPCS16里。数据烧写完成，再发起重配置，配置应用工程到FPGA里。如果这个时候配置又失败了，那么继续烧写数据到EPCS16里，直到数据烧写无误，烧写数据可以采用一些校验手段，一帧一帧的收收据，写到EPCS16里。</p>
<p>　　上面是情况是指应用工程所在地址配置文件是无效的。当应用工程本就是正常使用的，只是当前需要升级新的程序了。那么一上电，还是会先配置出厂配置工程，配置完成又配置成应用工程。最后在FPGA里跑的电路是应用工程，那么就要求在应用工程也需要有接受串口/网口数据，烧写EPCS16的功能，几乎需要将出厂配置工程里的功能都要加到应用工程里。但应用工程里不再需要重配置功能了，应用工程在没有收到更新的请求时，正常跑应用电路，在收到应用更新请求时，更新应用工程。</p>
<h1 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h1><p>　　本文主要描述了在线升级里用到的两个IP核和我书写该代码时的方法逻辑。至于串口/网口接收数据，接收数据过程中防止收错数据、漏收数据的校验方法，烧写擦除EPCS16，没有过多介绍。</p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>1.本文提到的两个IP 核工作频率限制在20M以内。<br>2.EPCS16在写之前要先擦除，否则可能写入失败。</p>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>ALTERA</tag>
        <tag>远程更新/在线升级</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客</title>
    <url>/2020/06/29/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>该博客建立时是在（F:\CodeManage\git）路径下储存文件，全程操作都在该文件里。</p>
<h2 id="1-申请域名"><a href="#1-申请域名" class="headerlink" title="1.申请域名"></a>1.申请域名</h2><p>在阿里云官网，点域名搜索，搜索自己想要注册的域名，购买。若没有阿里云账号，先注册账号。域名要实名认证（控制台-&gt;域名）。github仓库建好后，再将域名解析到github仓库。</p>
<h2 id="2-github仓库搭建"><a href="#2-github仓库搭建" class="headerlink" title="2.github仓库搭建"></a>2.github仓库搭建</h2><p>打开vpn注册github账号，新建仓库，仓库名以.github.io结尾，然后点create repository。这时将域名解析到仓库地址（<a href="https://github.com/watch-xx/watch.github.io），然后在该仓库的settings里将custom" target="_blank" rel="noopener">https://github.com/watch-xx/watch.github.io），然后在该仓库的settings里将custom</a> domain 填上自己的域名，便可以通过域名访问该仓库了。下面通过hexo搭建博客主页。</p>
<a id="more"></a>

<h2 id="3-git"><a href="#3-git" class="headerlink" title="3.git"></a>3.git</h2><h3 id="3-1安装git"><a href="#3-1安装git" class="headerlink" title="3.1安装git"></a>3.1安装git</h3><p>官网下载git,默认安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version	<span class="comment">#查看版本号。</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2设置ssh-key"><a href="#3-2设置ssh-key" class="headerlink" title="3.2设置ssh key"></a>3.2设置ssh key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"2593677381@qq.com"</span></span><br></pre></td></tr></table></figure>
<p>回车，输入密码。</p>
<h3 id="3-3设置公开密钥"><a href="#3-3设置公开密钥" class="headerlink" title="3.3设置公开密钥"></a>3.3设置公开密钥</h3><p>在github右上角settings里点SSH and GPG keys,点击Add SSH Key,title随意取，key通过命令行获取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub   <span class="comment">#获取密钥</span></span><br></pre></td></tr></table></figure>
<p>输出结果： ssh-rsa +”公开密钥的内容” <a href="mailto:+2593677381@qq.com">+2593677381@qq.com</a>（参考github入门与实践）</p>
<h2 id="4-安装Node-js"><a href="#4-安装Node-js" class="headerlink" title="4.安装Node.js"></a>4.安装Node.js</h2><p>F:\资料\soft，点安装，一路点next就ok了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v	<span class="comment">#查看版本号。</span></span><br></pre></td></tr></table></figure>

<h2 id="5-安装hexo"><a href="#5-安装hexo" class="headerlink" title="5.安装hexo"></a>5.安装hexo</h2><p>新建文件夹，后续操作都在此文件夹内。在此文件夹根目录，右键点git bash here,在git的bash下安装hexo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g <span class="comment">#安装hexo</span></span><br><span class="line">hexo -v           <span class="comment">#查看版本信息</span></span><br><span class="line">hexo init         <span class="comment">#初始化文件夹</span></span><br><span class="line">npm install       <span class="comment">#安装一些组件</span></span><br></pre></td></tr></table></figure>
<p>这样就在本地生成一个博客主页了，下面将该主页上传到github。</p>
<h2 id="6-博客部署到github"><a href="#6-博客部署到github" class="headerlink" title="6.博客部署到github"></a>6.博客部署到github</h2><p>在存放博客文件根目录打开git bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"watch-xx"</span>				<span class="comment">#github的用户名</span></span><br><span class="line">git config --global user.email <span class="string">"2593677381@qq.com"</span>	<span class="comment">#注册github的邮箱</span></span><br></pre></td></tr></table></figure>

<p>打开根目录下_config.yml,修改最后一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repository: https://github.com/watch-xx/watchman.github.io <span class="comment">#仓库地址</span></span><br><span class="line">branch : master</span><br></pre></td></tr></table></figure>
<p>下面是主页的美化设置。</p>
<h2 id="7-主页相关配置"><a href="#7-主页相关配置" class="headerlink" title="7.主页相关配置"></a>7.主页相关配置</h2><h6 id="1-主题设置"><a href="#1-主题设置" class="headerlink" title="1.主题设置"></a>1.主题设置</h6><p>进入到主题目录 （F:\CodeManage\git\themes\next）打开 _config.yml 文件。搜索关键词 scheme 。有四种主题可选 Muse/Mist/Pisces/Gemini。</p>
<h6 id="2-修改网站标题-作者等信息"><a href="#2-修改网站标题-作者等信息" class="headerlink" title="2.修改网站标题/作者等信息"></a>2.修改网站标题/作者等信息</h6><p>在 （F:\CodeManage\git）路径下打开 _config.yml 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: <span class="string">'Alxa'</span>								<span class="comment">#标题</span></span><br><span class="line">subtitle: <span class="string">''</span>								<span class="comment">#副标题</span></span><br><span class="line">description: <span class="string">'Accumulate and summarize'</span>		<span class="comment">#描述</span></span><br><span class="line">keywords:									</span><br><span class="line">author: Zhou Xi</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: <span class="string">'UTC'</span></span><br></pre></td></tr></table></figure>

<h6 id="3-设置背景图片"><a href="#3-设置背景图片" class="headerlink" title="3.设置背景图片"></a>3.设置背景图片</h6><p>先将图片存放在 F:\CodeManage\git\themes\next\source\images ，再到（F:\CodeManage\git\themes\next\source\css_custom）路径下打开custom.styl。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">background:url(/images/Greenland.jpg);   <span class="comment">#将url 改为自己的图片，或者添加上这句。</span></span><br></pre></td></tr></table></figure>
<h6 id="4-设置内容区域宽度"><a href="#4-设置内容区域宽度" class="headerlink" title="4.设置内容区域宽度"></a>4.设置内容区域宽度</h6><p>默认内容区域较窄，不好看。<br>在 F:\CodeManage\git\themes\next\source\css_custom 路径下 ，打开 custom.styl 。</p>
<p>pisces/Gemini主题添加代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.header&#123;</span><br><span class="line">    width: 80%;</span><br><span class="line">    +<span class="function"><span class="title">tablet</span></span>() &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="function"><span class="title">mobile</span></span>() &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.container .main-inner &#123;</span><br><span class="line">    width: 80%;</span><br><span class="line">    +<span class="function"><span class="title">tablet</span></span>() &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="function"><span class="title">mobile</span></span>() &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.content-wrap &#123;</span><br><span class="line">    width: calc(100% - 260px);</span><br><span class="line">    +<span class="function"><span class="title">tablet</span></span>() &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="function"><span class="title">mobile</span></span>() &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Mist/Muse主题添加代码（未尝试过）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line"><span class="variable">$content</span>-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line"><span class="variable">$content</span>-desktop-large = 900px</span><br></pre></td></tr></table></figure>

<h6 id="5-设置网站图标"><a href="#5-设置网站图标" class="headerlink" title="5.设置网站图标"></a>5.设置网站图标</h6><p>裁剪一个32*32的图片， .jpg/.png皆可，并在（<a href="https://tool.lu/favicon/）等网站制作成favtion文件，" target="_blank" rel="noopener">https://tool.lu/favicon/）等网站制作成favtion文件，</a> favtion.ico。<br>保存在 （F:\CodeManage\git\themes\next\source\images） 路径下。在路径（F:\CodeManage\git\themes\next）下打开 _config.yml。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line"> 30   small: /images/favicon-16x16-next.png</span><br><span class="line"> 31   medium: /images/favicon.ico			<span class="comment">#修改这行即可</span></span><br><span class="line"> 32   apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line"> 33   safari_pinned_tab: /images/logo.svg</span><br></pre></td></tr></table></figure>

<h6 id="6-设置菜单"><a href="#6-设置菜单" class="headerlink" title="6.设置菜单"></a>6.设置菜单</h6><p>在（F:\CodeManage\git\themes\next）路径下打开_config.yml。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /|| home</span><br><span class="line">  about: /about/|| user</span><br><span class="line">  tags: /tags/|| tags</span><br><span class="line">  categories: /categories/|| th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/|| calendar</span></span><br><span class="line">  sitemap: /sitemap.xml|| sitemap</span><br><span class="line">  <span class="comment"># commonweal: /404/|| heartbeat</span></span><br></pre></td></tr></table></figure>
<p>在需要打开的菜单前去掉注释即可。注意 “||” 前删掉空格，否则就会404。</p>
<p>手动生成 about ,tags ,categories 等页面,分别在/source/about , /source/tags , /source/categories 下生成一个 index.md文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>在tags文件页面 （/source/tags/index.md）添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-06-29 11:35:42   <span class="comment"># 时间随意</span></span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span>                <span class="comment"># 类型一定要为tags</span></span><br><span class="line">comments: <span class="literal">false</span>             <span class="comment"># 提示这个页面不需要加载评论</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>在categories文件页面 （/source/categories/index.md）添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2020-06-29 00:03:57</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h6 id="7-加入代码块复制功能"><a href="#7-加入代码块复制功能" class="headerlink" title="7.加入代码块复制功能"></a>7.加入代码块复制功能</h6><p>在博客根目录输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next/layout/_third-party/  <span class="comment">#到该目录下</span></span><br><span class="line">touch copy-code.swig                 <span class="comment">#新建文件</span></span><br></pre></td></tr></table></figure>
<p>在新建文件内添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.codeblock.copy_button.enable %&#125;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .copy-btn &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      padding: 6px 12px;</span><br><span class="line">      font-size: 13px;</span><br><span class="line">      font-weight: 700;</span><br><span class="line">      line-height: 20px;</span><br><span class="line">      color: <span class="comment">#333;</span></span><br><span class="line">      white-space: nowrap;</span><br><span class="line">      vertical-align: middle;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">      background-color: <span class="comment">#eee;</span></span><br><span class="line">      background-image: linear-gradient(<span class="comment">#fcfcfc, #eee);</span></span><br><span class="line">      border: 1px solid <span class="comment">#d5d5d5;</span></span><br><span class="line">      border-radius: 3px;</span><br><span class="line">      user-select: none;</span><br><span class="line">      outline: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap .copy-btn &#123;</span><br><span class="line">      transition: opacity .3s ease-in-out;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      padding: 2px 6px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      right: 4px;</span><br><span class="line">      top: 8px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap:hover .copy-btn,</span><br><span class="line">    .highlight-wrap .copy-btn:focus &#123;</span><br><span class="line">      opacity: 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .highlight-wrap &#123;</span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    $(<span class="string">'.highlight'</span>).each(<span class="keyword">function</span> (i, e) &#123;</span><br><span class="line">      var <span class="variable">$wrap</span> = $(<span class="string">'&lt;div&gt;'</span>).addClass(<span class="string">'highlight-wrap'</span>)</span><br><span class="line">      $(e).after(<span class="variable">$wrap</span>)</span><br><span class="line">      <span class="variable">$wrap</span>.append($(<span class="string">'&lt;button&gt;'</span>).addClass(<span class="string">'copy-btn'</span>).append(<span class="string">'&#123;&#123;__("post.copy_button")&#125;&#125;'</span>).on(<span class="string">'click'</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">        var code = $(this).parent().find(<span class="string">'.code'</span>).find(<span class="string">'.line'</span>).map(<span class="keyword">function</span> (i, e) &#123;</span><br><span class="line">          <span class="built_in">return</span> $(e).text()</span><br><span class="line">        &#125;).toArray().join(<span class="string">'\n'</span>)</span><br><span class="line">        var ta = document.createElement(<span class="string">'textarea'</span>)</span><br><span class="line">        document.body.appendChild(ta)</span><br><span class="line">        ta.style.position = <span class="string">'absolute'</span></span><br><span class="line">        ta.style.top = <span class="string">'0px'</span></span><br><span class="line">        ta.style.left = <span class="string">'0px'</span></span><br><span class="line">        ta.value = code</span><br><span class="line">        ta.select()</span><br><span class="line">        ta.focus()</span><br><span class="line">        var result = document.execCommand(<span class="string">'copy'</span>)</span><br><span class="line">        document.body.removeChild(ta)</span><br><span class="line">        &#123;% <span class="keyword">if</span> theme.codeblock.copy_button.show_result %&#125;</span><br><span class="line">          <span class="keyword">if</span>(result)$(this).text(<span class="string">'&#123;&#123;__("post.copy_success")&#125;&#125;'</span>)</span><br><span class="line">          <span class="keyword">else</span> $(this).text(<span class="string">'&#123;&#123;__("post.copy_failure")&#125;&#125;'</span>)</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        $(this).blur()</span><br><span class="line">      &#125;)).on(<span class="string">'mouseleave'</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">        var <span class="variable">$b</span> = $(this).find(<span class="string">'.copy-btn'</span>)</span><br><span class="line">        setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">          <span class="variable">$b</span>.text(<span class="string">'&#123;&#123;__("post.copy_button")&#125;&#125;'</span>)</span><br><span class="line">        &#125;, 300)</span><br><span class="line">      &#125;).append(e)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>再返回上级目录（themes/next/layout/），打开 _layout.swig </p>
<p>在此处添加代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% include <span class="string">'_third-party/copy-code.swig'</span> %&#125;</span><br></pre></td></tr></table></figure>
<p>进入themes/next/languages/目录，打开zh-HK.yml.<br>在post:  下面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy_button: 复制</span><br><span class="line">copy_success: 复制成功</span><br><span class="line">copy_failure: 复制失败</span><br></pre></td></tr></table></figure>
<p>打开en.yml<br>在post :  下面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy_button: Copy</span><br><span class="line">copy_success: Copied</span><br><span class="line">copy_failure: Copy failed</span><br></pre></td></tr></table></figure>
<p>再到/themes/next/_config.yml ,在其中的codeblock中添加copy_button的开关。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line"> 69   copy_button:</span><br><span class="line"> 70     <span class="built_in">enable</span>: <span class="literal">true</span>      <span class="comment"># 增加复制按钮的开关</span></span><br><span class="line"> 71     show_result: <span class="literal">true</span> <span class="comment"># 点击复制完后是否显示 复制成功 结果提示</span></span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>发布<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>个人域名</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
